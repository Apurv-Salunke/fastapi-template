services:
  print-env:
    image: alpine
    command: ["sh", "-c", "env"]
    env_file:
      - .env.docker
  db:
    image: postgres:latest
    restart: always
    env_file:
      - .env.docker
    environment:
      - POSTGRES_USER=${DB_USERNAME:-fastapi_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-your_secure_password}
      - POSTGRES_DB=${DB_NAME:-fastapi_db}
    healthcheck:
      test: ["CMD-SHELL", "echo 'SELECT 1' | mysql -hlocalhost -uroot -p${DB_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      - redis
    volumes:
      - db:/var/lib/postgresql/data
      # Uncomment only if you have SQL scripts to run on container startup
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    networks:
      - fast-api-network

  redis:
    image: redis:6-alpine
    restart: always
    env_file:
      - .env.docker
    networks:
      - fast-api-network

  wait-for-db:
    image: atkrad/wait4x
    depends_on:
      db:
        condition: service_healthy
    command: tcp db:${DB_PORT} -t 30s -i 250ms
    env_file:
      - .env.docker
    networks:
      - fast-api-network

  app:
    build: .
    restart: always
    container_name: fast-api-app
    env_file:
      - .env.docker
    depends_on:
      wait-for-db:
        condition: service_completed_successfully
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    environment:
      ENVIRONMENT_NAME: "${ENVIRONMENT_NAME}"
    networks:
      - fast-api-network

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: ['celery', '-A', 'app.app.celery', 'worker', '-l', 'info']
    env_file:
      - .env.docker
    depends_on:
      - redis
      - app
    networks:
      - fast-api-network

  flower:
    image: mher/flower:0.9.7
    command: ['flower', '--broker=${REDIS_URL}/6', '--port=5555']
    ports:
      - 5556:5555
    depends_on:
      - redis
      - worker
    env_file:
      - .env.docker
    networks:
      - fast-api-network
  pmm-server:
    image: percona/pmm-server:latest
    ports:
      - "443:443"
    volumes:
      - pmm-data:/srv
    environment:
      SERVER_USER: admin
      SERVER_PASSWORD: admin
    env_file:
      - .env.docker
    networks:
      - fast-api-network

  pmm-client:
    image: percona/pmm-client:latest
    environment:
      PMM_SERVER: pmm-server
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host:ro
    env_file:
      - .env.docker
    networks:
      - fast-api-network
  locust-master:
    image: locustio/locust
    ports:
      - "8089:8089"  # Expose Locust's web interface on port 8089
    volumes:
      - ./loadtests:/mnt/locust  # Mount the loadtests directory into the container
    command: -f /mnt/locust --master -H http://app:"${SERVER_PORT}"  # Start Locust in master mode, pointing to your FastAPI application
    env_file:
      - .env.docker
    networks:
      - fast-api-network
  locust-worker:
    image: locustio/locust
    volumes:
      - ./loadtests:/mnt/locust  # Mount the loadtests directory into the container
    command: -f /mnt/locust --worker --master-host locust-master
    env_file:
      - .env.docker
    networks:
      - fast-api-network
networks:
  fast-api-network:
    driver: bridge

volumes:
  db:
  pmm-data:
